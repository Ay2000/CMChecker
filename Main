/*Bowie Gian
Andrew Yeon
Marcus Yan
Nov. 28, 2018
CMPT 128
Assignment 2*/

//includes the various libraries this program requires
#include <iostream>
#include <iomanip>
#include <cmath>
#include <limits>
using namespace std;

//declares various constants
const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72;

const int NOPLAYER = 0;
const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;

const int NOONEWINS = 0;
const int WHITEWINS = 1;
const int REDWINS = 2; 

//defines given function parameters
void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);
void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);
int CountJumps(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[]);
bool CheckList(int inArray1[], int inArray2[], int xIndex, int yIndex);
int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[]);
bool IsMove1Square(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc);
bool IsJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc);
bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int fromSquareNum, int toSquareNum, bool &jumped);
bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);

//defines custom function parameters

//checks if piece can move in a specific direction (reverses y for red player)
bool CheckMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection);

//checks if piece can jump in a specific direction (reverses y for red player)
bool CheckJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection);

//checks if the piece is the specified player's
bool IsPlayersPiece(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int player, int xLoc, int yLoc);

//converts the square number into x & y coordinates
void getCoordinates(int squareNumber, int numRowsInBoard, int &xCoordinate, int &yCoordinate);

//converts the x & y coordinates to the square number
int getSquare(int xCoordinate, int yCoordinate, int numRowsInBoard);

//outputs the opponent player
int otherPlayer(int player);

int main()
{
	int myCMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE] = { 0 };
	int xIndicesMove[MAX_PIECES] = { 0 };
	int yIndicesMove[MAX_PIECES] = { 0 };
	int xIndicesJump[MAX_PIECES] = { 0 };
	int yIndicesJump[MAX_PIECES] = { 0 };

	int numRowsInBoard = 0;
	const int numRowsInBoardMin = 8;
	const int numRowsInBoardMax = 18;

	int initialSquare = 0;						//the square the checker is on
	int xInitialSquare = 0;						//x and y coordinates of the checker
	int yInitialSquare = 0;

	int finalSquare = 0;						//the square the checker is going to
	int xFinalSquare = 0;
	int yFinalSquare = 0;

	int player = NOPLAYER;
	int numJumps = 0;
	int numMove1Squares = 0;
	bool jumped = false;
	int winner = NOONEWINS;
	char endChar = '\0';

	//Checks for errors in board size input 3 times
	for (int tries = 1; tries <= 3; tries++)
	{
		cout << "Enter the number of squares along each edge of the board" << endl;

		if (!(cin >> numRowsInBoard))
			cerr << "ERROR: Board size is not an integer." << endl << "8 <= number of squares <= 18" << endl;
		else if (numRowsInBoard > numRowsInBoardMax)
			cerr << "ERROR: Board size too large." << endl << "8 <= number of squares <= 18" << endl;
		else if (numRowsInBoard < numRowsInBoardMin)
			cerr << "ERROR: Board size too small." << endl << "8 <= number of squares <= 18" << endl;
		else if (numRowsInBoard % 2 == 1)
			cerr << "ERROR: Board size odd." << endl << "8 <= number of squares <= 18" << endl;
		else
			break;

		cin.clear();
		cin.ignore(numeric_limits<streamsize>::max(), '\n');

		if (tries == 3)
		{
			cerr << "ERROR: Too many errors entering the size of the board.";
			return -1;
		}
	}

	InitializeBoard(myCMCheckersBoard, numRowsInBoard);
	DisplayBoard(myCMCheckersBoard, numRowsInBoard);
	player = WHITEPLAYER;

	//while there is no winner, keep playing the game.
	while (winner == NOONEWINS)
	{
		//initialize arrays to -1
		fill_n(xIndicesJump, MAX_PIECES, -1);
		fill_n(yIndicesJump, MAX_PIECES, -1);
		fill_n(xIndicesMove, MAX_PIECES, -1);
		fill_n(yIndicesMove, MAX_PIECES, -1);
		//count how many pieces can jump and move
		numJumps = CountJumps(myCMCheckersBoard, numRowsInBoard, player, xIndicesJump, yIndicesJump);
		numMove1Squares = CountMove1Squares(myCMCheckersBoard, numRowsInBoard, player, xIndicesMove, yIndicesMove);

		//if player cannot move, they lose
		if (numJumps == 0 && numMove1Squares == 0)
		{
			if (player == WHITEPLAYER)
			{
				cout << "White is unable to move." << endl << "GAME OVER, Red has won." << endl << "Enter any character to close the game." << endl;
				cin >> endChar;
				winner = REDWINS;
				return REDWINS;
			}
			else if (player == REDPLAYER)
			{
				cout << "Red is unable to move." << endl << "GAME OVER, White has won." << endl << "Enter any character to close the game." << endl;
				cin >> endChar;
				winner = WHITEWINS;
				return WHITEWINS;
			}
		}

		if (player == WHITEPLAYER)
			cout << "White takes a turn." << endl;
		else if (player == REDPLAYER)
			cout << "Red takes a turn." << endl;

		//loop input for initial square until no error
		while (true) {
			jumped = false;
			cout << "Enter the square number of the checker you want to move" << endl;

			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			if (!(cin >> initialSquare))
			{
				cerr << "ERROR: You did not enter an integer." << endl << "Try again" << endl;
				continue;
			}
			else if (initialSquare < 0 || initialSquare >= (numRowsInBoard * numRowsInBoard))
			{
				cerr << "ERROR: That square is not on the board." << endl << "Try again" << endl;
				continue;
			}

			//converts square number to x & y coordinates
			getCoordinates(initialSquare, numRowsInBoard, xInitialSquare, yInitialSquare);

			if (IsPlayersPiece(myCMCheckersBoard, otherPlayer(player), xInitialSquare, yInitialSquare))
			{
				cerr << "ERROR: That square contains an opponent's checker." << endl << "Try again" << endl;
				continue;
			}
			else if (myCMCheckersBoard[xInitialSquare][yInitialSquare] == NOPLAYER)
			{
				cerr << "ERROR: That square is empty." << endl << "Try again" << endl;
				continue;
			}
			//if cannot jump
			else if (!CheckList(xIndicesJump, yIndicesJump, xInitialSquare, yInitialSquare))
			{
				//if there are pieces that can jump
				if (numJumps != 0)
				{
					cerr << "ERROR: You can jump with another checker, you may not move your chosen checker." << endl
						<< "You can jump using checkers on the following squares:";

					//go through the x & y coordinates that can jump
					for (int index = 0; index < MAX_PIECES; index++)
					{
						if (xIndicesJump[index] == -1 || yIndicesJump[index] == -1)
							break;

						//output the converted square numbers
						cerr << " " << getSquare(xIndicesJump[index], yIndicesJump[index], numRowsInBoard);
					}
					cerr << endl << "Try again" << endl;
					continue;
				}
				//if cannot move
				else if (!CheckList(xIndicesMove, yIndicesMove, xInitialSquare, yInitialSquare))
				{
					cerr << "ERROR: There is no legal move for this checker." << endl << "Try again" << endl;
					continue;
				}
			}

			break;
		}

		//loop input for final square until no error
		while (true)
		{
			if (jumped == false)
				cout << "Enter the square number of the square you want to move your checker to" << endl;

			cin.clear();
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			if (!(cin >> finalSquare))
			{
				cerr << "ERROR: You did not enter an integer." << endl << "Try again" << endl;
				continue;
			}
			else if (finalSquare < 0 || finalSquare >= (numRowsInBoard * numRowsInBoard))
			{
				cerr << "ERROR: It is not possible to move to a square that is not on the board." << endl << "Try again" << endl;
				continue;
			}

			//converts square number to x & y coordinates
			getCoordinates(finalSquare, numRowsInBoard, xFinalSquare, yFinalSquare);

			//if not 0, then there is a piece
			if (myCMCheckersBoard[xFinalSquare][yFinalSquare] != NOPLAYER)
			{
				cerr << "ERROR: It is not possible to move to a square that is already occupied." << endl << "Try again" << endl;
				continue;
			}
			//if part of jump indices and player is not moving 1 diagonally
			else if (CheckList(xIndicesJump, yIndicesJump, xInitialSquare, yInitialSquare) && abs(xFinalSquare - xInitialSquare) == 1 && abs(yFinalSquare - yInitialSquare) == 1)
			{
				cerr << "ERROR: You can jump with this checker, you must jump not move 1 space." << endl << "Try again" << endl;
				continue;
			}
			//if MakeMove failed
			else if (!MakeMove(myCMCheckersBoard, numRowsInBoard, player, initialSquare, finalSquare, jumped))
			{
				cerr << "ERROR: Moving to that square is not legal, Try again." << endl;
				continue;
			}

			if (jumped)
			{
				jumped = false;
				//if cannot jump, skip this part
				if (!IsJump(myCMCheckersBoard, numRowsInBoard, player, xFinalSquare, yFinalSquare))
					break;

				//set new position to initial position
				initialSquare = finalSquare;
				xInitialSquare = xFinalSquare;
				yInitialSquare = yFinalSquare;

				cout << "You can jump again, Please enter the next square you wish to move your checker to" << endl;
				continue;
			}

			break;
		}

		//if no one won
		if (!CheckWin(myCMCheckersBoard, numRowsInBoard))
		{
			//display and switch players
			DisplayBoard(myCMCheckersBoard, numRowsInBoard);
			player = otherPlayer(player);
			continue;
		}
		//if someone won, set winner and exit while statement
		else if (player == WHITEPLAYER)
			winner = WHITEPLAYER;
		else if (player == REDPLAYER)
			winner = REDPLAYER;
	}

	cout << "Enter any character to terminate the game then press the enter key" << endl << "The program will terminate after the player presses the enter key" << endl;
	cin >> endChar;
	return 0;
}

//puts pieces on the board
void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	//sets up mules on the first and last rows
	for (int i = 0; i < numRowsInBoard; i += 2)
	{
		CMCheckersBoard[i + 1][0] = WHITEMULE;
		CMCheckersBoard[i][numRowsInBoard - 1] = REDMULE;
	}
	//sets up soldier pieces for both players in offset positions, excluding the middle 2 rows
	for (int j = 1; j <= ((numRowsInBoard / 2) - 2); j++)
		for (int i = 0; i < numRowsInBoard; i += 2)
		{
			if (j % 2 == 1)
			{
				CMCheckersBoard[i][j] = WHITESOLDIER;
				CMCheckersBoard[i + 1][numRowsInBoard - j - 1] = REDSOLDIER;
			}
			else {
				CMCheckersBoard[i][numRowsInBoard - j - 1] = REDSOLDIER;
				CMCheckersBoard[i + 1][j] = WHITESOLDIER;
			}
		}
}

//displays the board
void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int squareNumber = 0;

	//loop through all squares
	for (int j = 0; j < numRowsInBoard; j++)
	{
		for (int i = 0; i < numRowsInBoard; i++)
		{
			if (CMCheckersBoard[i][j] == WHITESOLDIER)			//print out pieces
				cout << "  WS";
			else if (CMCheckersBoard[i][j] == WHITEMULE)
				cout << "  WM";
			else if (CMCheckersBoard[i][j] == WHITEKING)
				cout << "  WK";
			else if (CMCheckersBoard[i][j] == REDSOLDIER)
				cout << "  RS";
			else if (CMCheckersBoard[i][j] == REDMULE)
				cout << "  RM";
			else if (CMCheckersBoard[i][j] == REDKING)
				cout << "  RK";
			else												//if not a piece, print out square number
				cout << setw(4) << squareNumber;

			squareNumber++;
		}
		cout << endl;
	}
	cout << endl << endl;
}

//counts the number of jumpable pieces
int CountJumps(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[])
{
	int numJumps = 0;

	//loop through all squares
	for (int yIndex = 0; yIndex < numRowsInBoard; yIndex++)
		for (int xIndex = 0; xIndex < numRowsInBoard; xIndex++)
		{
			//if piece can jump and it is the player's piece
			if (IsJump(CMCheckersBoard, numRowsInBoard, player, xIndex, yIndex) && IsPlayersPiece(CMCheckersBoard, player, xIndex, yIndex))
			{
				//add x & y coordinates to the array and count the number of jumpable pieces
				xLocArray[numJumps] = xIndex;
				yLocArray[numJumps] = yIndex;
				numJumps++;
			}
		}

	return numJumps;
}

//check if the x & y coordinates are in the x & y arrays
bool CheckList(int inArray1[], int inArray2[], int xIndex, int yIndex)
{
	//loop through both arrays
	for (int j = 0; j < MAX_PIECES; j++)
		for (int i = 0; i < MAX_PIECES; i++)
		{
			//if there is a -1, there are no more values in the arrays
			if (inArray1[i] == -1 || inArray2[j] == -1)
				break;
			else if (inArray1[i] == xIndex && inArray2[j] == yIndex)
				return true;
		}

	return false;
}


int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[])
{
	int numMove = 0;

	for (int yIndex = 0; yIndex < numRowsInBoard; yIndex++)
		for (int xIndex = 0; xIndex < numRowsInBoard; xIndex++)
		{
			if (IsMove1Square(CMCheckersBoard, numRowsInBoard, player, xIndex, yIndex) && IsPlayersPiece(CMCheckersBoard, player, xIndex, yIndex))
			{
				xLocArray[numMove] = xIndex;
				yLocArray[numMove] = yIndex;
				numMove++;
			}
		}

	return numMove;
}

bool IsMove1Square(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc)
{
	if (CMCheckersBoard[xLoc][yLoc] == WHITEKING || CMCheckersBoard[xLoc][yLoc] == REDKING)
	{
		if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, -1) == true)
			return true;
		else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, -1) == true)
			return true;
	}
	else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, 1) == true)
		return true;
	else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, 1) == true)
		return true;

	return false;
}

//checks if the piece can jump
bool IsJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc)
{
	//if the piece is a king, it can jump backwards
	if (CMCheckersBoard[xLoc][yLoc] == WHITEKING || CMCheckersBoard[xLoc][yLoc] == REDKING)
	{
		if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, -1) == true)
			return true;
		else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, -1) == true)
			return true;
	}
	//if not, it can jump forwards
	else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, 1) == true)
		return true;
	else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, 1) == true)
		return true;

	return false;
}

bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int fromSquareNum, int toSquareNum, bool &jumped) //allows player to make a move
{
	char gameOver = '\0';		//variable used to see if the player has entered a key or not at the end of a game
	int xInitialSquare = 0;		//variable showing the x component of a piece's initial position
	int yInitialSquare = 0;		//variable showing the y component of a piece's initial position
	int xFinalSquare = 0;		//variable showing the x component of a piece's final position
	int yFinalSquare = 0;		//variable showing the y component of a piece's final position
	int xdistance = 0;			//variable showing the distance traveled on the x axis
	int ydistance = 0;			//variable showing the distance traveled on the y axis

	getCoordinates(fromSquareNum, numRowsInBoard, xInitialSquare, yInitialSquare);
	getCoordinates(toSquareNum, numRowsInBoard, xFinalSquare, yFinalSquare);			//gets coordinates of squares

	xdistance = xFinalSquare - xInitialSquare;	//calculates the distance traveled on the x axis
	if (xdistance >= numRowsInBoard - 2)		//accounts for moving  around the board
		xdistance -= numRowsInBoard;
	else if (xdistance <= 2 - numRowsInBoard)
		xdistance += numRowsInBoard;

	ydistance = yFinalSquare - yInitialSquare;	//calculates the distance traveled on the y axis

	if (abs(xdistance) > 2 && abs(ydistance) > 2)	//determines if the player moves the piece too far
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	//determines if a piece is moved 2 squares without jumping
	else if (abs(xdistance) == 2 && abs(ydistance) == 2 && !IsPlayersPiece(CMCheckersBoard, otherPlayer(player), (xInitialSquare + numRowsInBoard + xdistance / 2) % numRowsInBoard, yInitialSquare + ydistance / 2))
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	//determines if the piece is moved in the wrong direction
	else if ((player == WHITEPLAYER && CMCheckersBoard[xInitialSquare][yInitialSquare] != WHITEKING && ydistance <= 0) || (player == REDPLAYER && CMCheckersBoard[xInitialSquare][yInitialSquare] != REDKING && ydistance >= 0))
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	else if (abs(xdistance) == 1 && abs(ydistance) == 1) //if piece is moved one square diagonally
	{
		CMCheckersBoard[xFinalSquare][yFinalSquare] = CMCheckersBoard[xInitialSquare][yInitialSquare];
		CMCheckersBoard[xInitialSquare][yInitialSquare] = 0;
		return true;
	}
	else if (abs(xdistance) == 2 && abs(ydistance) == 2) //if piece jumps over another piece
	{
		CMCheckersBoard[xFinalSquare][yFinalSquare] = CMCheckersBoard[xInitialSquare][yInitialSquare];
		CMCheckersBoard[xInitialSquare][yInitialSquare] = 0;
		CMCheckersBoard[(xInitialSquare + numRowsInBoard + xdistance / 2) % numRowsInBoard][yInitialSquare + ydistance / 2] = 0;
		jumped = true;
		return true;
	}
	else //accounts for all other illegal moves
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}

	if (player == REDPLAYER && yFinalSquare == 0 || player == WHITEPLAYER && yFinalSquare == numRowsInBoard - 1) //determines if a piece was crowned king
	{
		if (player == REDPLAYER)
		{
			if (CMCheckersBoard[xFinalSquare][yFinalSquare] = REDMULE)	//white player wins if red mule is crowned
			{
				CMCheckersBoard[xFinalSquare][yFinalSquare] = REDKING;
				cout << "Red has created a Mule King,  White wins the game" << endl;
				cout << "Enter any character to terminate the game then press the enter key" << endl;
				cin >> gameOver;
				terminate();

			}
			else {
				CMCheckersBoard[xFinalSquare][yFinalSquare] = REDKING; //a soldier gets crowned king
				return true;
			}
		} //end of redplayer
		else if (player == WHITEPLAYER)
		{
			if (CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEMULE)	//red player wins if white mule is crowned
			{
				CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEKING;
				cout << "White has created a Mule King,  Red wins the game" << endl;
				cout << "Enter any character to terminate the game then press the enter key" << endl;
				cin >> gameOver;
				terminate();
			}
			else {
				CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEKING;	//a soldier gets crowned king
				return true;
			}
		}
	}
}

bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int REDMULE_count = 0;
	int WHITEMULE_count = 0;
	int WHITESOLDIER_count = 0;
	int REDSOLDIER_count = 0;
	int WHITEKING_count = 0;
	int REDKING_count = 0;

	for (int j = 0; j < numRowsInBoard; j++)
		for (int i = 0; i < numRowsInBoard; i++)
		{
			if (CMCheckersBoard[j][i] == REDMULE)
				REDMULE_count++;
			else if (CMCheckersBoard[j][i] == WHITEMULE)
				WHITEMULE_count++;
			else if (CMCheckersBoard[j][i] == WHITESOLDIER)
				WHITESOLDIER_count++;
			else if (CMCheckersBoard[j][i] == REDSOLDIER)
				REDSOLDIER_count++;
			else if (CMCheckersBoard[j][i] == REDKING)
				REDKING_count++;
			else if (CMCheckersBoard[j][i] == WHITEKING)
				WHITEKING_count++;
		}

	if (REDMULE_count == 0)
	{
		cout << "The Red Player has won the game by losing all of the Red Mules" << endl;
		return true;
	}
	else if (WHITEMULE_count == 0)
	{
		cout << "The White Player has won the game by losing all of the White Mules" << endl;
		return true;
	}
	else if (REDKING_count == 0 && REDSOLDIER_count == 0)
	{
		cout << "The White Player has won by capturing all of the red players soldiers and kings" << endl;
		return true;
	}
	else if (WHITEKING_count == 0 && WHITESOLDIER_count == 0)
	{
		cout << "The Red Player has won by capturing all of the white players soldiers and kings" << endl;
		return true;
	}

	return false;
}


//checks if piece can move in a specific direction (reverses y for red player)
bool CheckMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection)
{
	if (player == WHITEPLAYER && CMCheckersBoard[(xLoc + numRowsInBoard + xDirection) % numRowsInBoard][yLoc + yDirection] == NOPLAYER)
		return true;
	else if (player == REDPLAYER && CMCheckersBoard[(xLoc + numRowsInBoard + xDirection) % numRowsInBoard][yLoc - yDirection] == NOPLAYER)
		return true;

	return false;
}

//checks if piece can jump in a specific direction (reverses y for red player)
bool CheckJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection)
{
	//checks if white piece can jump in a direction accounting for the cylinder shape
	if (player == WHITEPLAYER && IsPlayersPiece(CMCheckersBoard, REDPLAYER, (xLoc + numRowsInBoard + xDirection) % numRowsInBoard, yLoc + yDirection) && CMCheckersBoard[(xLoc + numRowsInBoard + 2 * xDirection) % numRowsInBoard][yLoc + 2 * yDirection] == NOPLAYER)
		return true;
	//if it is a red piece, reverse the y direction
	else if (player == REDPLAYER && IsPlayersPiece(CMCheckersBoard, WHITEPLAYER, (xLoc + numRowsInBoard + xDirection) % numRowsInBoard, yLoc - yDirection) && CMCheckersBoard[(xLoc + numRowsInBoard + 2 * xDirection) % numRowsInBoard][yLoc - 2 * yDirection] == NOPLAYER)
		return true;

	return false;
}

//checks if the piece is the specified player's
bool IsPlayersPiece(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int player, int xLoc, int yLoc)
{
	//if white player and white piece
	if (player == WHITEPLAYER && (CMCheckersBoard[xLoc][yLoc] == WHITESOLDIER || CMCheckersBoard[xLoc][yLoc] == WHITEMULE || CMCheckersBoard[xLoc][yLoc] == WHITEKING))
		return true;
	//if red player and red piece
	else if (player == REDPLAYER && (CMCheckersBoard[xLoc][yLoc] == REDSOLDIER || CMCheckersBoard[xLoc][yLoc] == REDMULE || CMCheckersBoard[xLoc][yLoc] == REDKING))
		return true;

	return false;
}

//converts the square number into x & y coordinates
void getCoordinates(int squareNumber, int numRowsInBoard, int &xCoordinate, int &yCoordinate)
{
	//the remainder is the x coordinate
	xCoordinate = squareNumber % numRowsInBoard;
	//integer division ignores the decimal part, so it returns the y coordinate
	yCoordinate = squareNumber / numRowsInBoard;
}

//converts the x & y coordinates to the square number
int getSquare(int xCoordinate, int yCoordinate, int numRowsInBoard)
{
	int square = 0;
	square = yCoordinate * numRowsInBoard + xCoordinate;
	return square;
}

//outputs the opponent player
int otherPlayer(int player)
{
	if (player == WHITEPLAYER)
		return REDPLAYER;
	else if (player == REDPLAYER)
		return WHITEPLAYER;

	return -1;
}
