#include <iostream>
#include <iomanip>
#include <cmath>
#include <algorithm>
using namespace std;

const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72;

const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

const int NOPLAYER = 0;
const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;

const int NOONEWINS = 0;
const int WHITEWINS = 1;
const int REDWINS = 2;

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);
void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);
int CountJumps(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[]);
bool CheckList(int inArray1[], int inArray2[], int xIndex, int yIndex);
int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[]);
bool IsMove1Square(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc);
bool IsJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc);
bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int fromSquareNum, int toSquareNum, bool &jumped);
bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);

bool CheckMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection);
bool CheckJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection);
bool IsPlayersPiece(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int player, int xLoc, int yLoc);
void getCoordinates(int squareNumber, int numRowsInBoard, int &xCoordinate, int &yCoordinate);
int getSquare(int xCoordinate, int yCoordinate, int numRowsInBoard);
int otherPlayer(int player);

int main()
{
	int myCMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE] = { 0 };
	int xIndicesMove[MAX_PIECES] = { 0 };
	int yIndicesMove[MAX_PIECES] = { 0 };
	int xIndicesJump[MAX_PIECES] = { 0 };
	int yIndicesJump[MAX_PIECES] = { 0 };

	int numRowsInBoard = 0;
	const int numRowsInBoardMin = 8;
	const int numRowsInBoardMax = 18;

	int initialSquare = 0;
	int xInitialSquare = 0;
	int yInitialSquare = 0;

	int finalSquare = 0;
	int xFinalSquare = 0;
	int yFinalSquare = 0;

	int player = NOPLAYER;
	int numJumps = 0;
	int numMove1Squares = 0;
	bool jumped = false;

	int winner = NOONEWINS;
	char endChar = '\0';

	for (int tries = 1; tries <= 3; tries++)
	{
		cout << "Enter the number of squares along each edge of the board" << endl;

		if (!(cin >> numRowsInBoard))
		{
			cerr << "ERROR: Board size is not an integer." << endl << "8 <= number of squares <= 18" << endl;
			cin.clear();
			cin.ignore();
		}
		else if (numRowsInBoard > numRowsInBoardMax)
			cerr << "ERROR: Board size too large." << endl << "8 <= number of squares <= 18" << endl;
		else if (numRowsInBoard < 4)														//change back to numRowsInBoardMin
			cerr << "ERROR: Board size too small." << endl << "8 <= number of squares <= 18" << endl;
		else if (numRowsInBoard % 2 == 1)
			cerr << "ERROR: Board size odd." << endl << "8 <= number of squares <= 18" << endl;
		else
			break;

		if (tries == 3)
		{
			cerr << "ERROR: Too many errors entering the size of the board.";
			return -1;
		}
	}

	InitializeBoard(myCMCheckersBoard, numRowsInBoard);
	DisplayBoard(myCMCheckersBoard, numRowsInBoard);
	player = WHITEPLAYER;

	while (winner == NOONEWINS)
	{
		fill_n(xIndicesJump, MAX_PIECES, -1);
		fill_n(yIndicesJump, MAX_PIECES, -1);
		fill_n(xIndicesMove, MAX_PIECES, -1);
		fill_n(yIndicesMove, MAX_PIECES, -1);
		numJumps = CountJumps(myCMCheckersBoard, numRowsInBoard, player, xIndicesJump, yIndicesJump);
		numMove1Squares = CountMove1Squares(myCMCheckersBoard, numRowsInBoard, player, xIndicesMove, yIndicesMove);

		if (numJumps == 0 && numMove1Squares == 0)
		{
			if (player == WHITEPLAYER)
			{
				cout << "White is unable to move." << endl << "GAME OVER, Red has won." << endl << "Enter any character to close the game." << endl;
				cin >> endChar;
				return REDWINS;
			}
			else if (player == REDPLAYER)
			{
				cout << "Red is unable to move." << endl << "GAME OVER, White has won." << endl << "Enter any character to close the game." << endl;
				cin >> endChar;
				return WHITEWINS;
			}
		}

		if (player == WHITEPLAYER)
			cout << "White takes a turn." << endl;
		else if (player == REDPLAYER)
			cout << "Red takes a turn." << endl;

		while (true) {
			jumped = false;
			cout << "Enter the square number of the checker you want to move" << endl;

			if (!(cin >> initialSquare))
			{
				cerr << "ERROR: You did not enter an integer." << endl << "Try again" << endl;
				cin.clear();
				cin.ignore();
				continue;
			}
			else if (initialSquare < 0 || initialSquare >= (numRowsInBoard * numRowsInBoard))
			{
				cerr << "ERROR: That square is not on the board." << endl << "Try again" << endl;
				continue;
			}

			getCoordinates(initialSquare, numRowsInBoard, xInitialSquare, yInitialSquare);

			if (IsPlayersPiece(myCMCheckersBoard, otherPlayer(player), xInitialSquare, yInitialSquare))
			{
				cerr << "ERROR: That square contains an opponent's checker." << endl << "Try again" << endl;
				continue;
			}
			else if (myCMCheckersBoard[xInitialSquare][yInitialSquare] == NOPLAYER)
			{
				cerr << "ERROR: That square is empty." << endl << "Try again" << endl;
				continue;
			}
			else if (!IsJump(myCMCheckersBoard, numRowsInBoard, player, xInitialSquare, yInitialSquare))
			{
				if (numJumps != 0)
				{
					cerr << "ERROR: You can jump with another checker, you may not move your chosen checker." << endl
						<< "You can jump using checkers on the following squares:";
					for (int index1 = 0; index1 < MAX_PIECES; index1++)
					{
						if (xIndicesJump[index1] == -1 || yIndicesJump[index1] == -1)
							break;
						cerr << " " << getSquare(xIndicesJump[index1], yIndicesJump[index1], numRowsInBoard);
					}
					cerr << endl << "Try again" << endl;
					continue;
				}
				else if (!IsMove1Square(myCMCheckersBoard, numRowsInBoard, player, xInitialSquare, yInitialSquare))
				{
					cerr << "ERROR: There is no legal move for this checker." << endl << "Try again" << endl;
					continue;
				}
			}

			cout << "Enter the square number of the square you want to move your checker to" << endl;

			do
			{
				if (!(cin >> finalSquare))
				{
					cerr << "ERROR: You did not enter an integer." << endl << "Try again" << endl;
					cin.clear();
					cin.ignore();
					continue;
				}
				else if (finalSquare < 0 || finalSquare >= (numRowsInBoard * numRowsInBoard))
				{
					cerr << "ERROR: It is not possible to move to a square that is not on the board." << endl << "Try again" << endl;
					continue;
				}

				getCoordinates(finalSquare, numRowsInBoard, xFinalSquare, yFinalSquare);

				if (myCMCheckersBoard[xFinalSquare][yFinalSquare] != NOPLAYER)
				{
					cerr << "ERROR: It is not possible to move to a square that is already occupied." << endl << "Try again" << endl;
					continue;
				}
				else if (IsJump(myCMCheckersBoard, numRowsInBoard, player, xInitialSquare, yInitialSquare) && abs(xFinalSquare - xInitialSquare) == 1 && abs(yFinalSquare - yInitialSquare) == 1)
				{
					cerr << "ERROR: You can jump with this checker, you must jump not move 1 space." << endl << "Try again" << endl;
					continue;
				}
				else if (!MakeMove(myCMCheckersBoard, numRowsInBoard, player, initialSquare, finalSquare, jumped))
				{
					cerr << "ERROR: Moving to that square is not legal, Try again." << endl;
					continue;
				}

				if (jumped)
				{
					if (!IsJump(myCMCheckersBoard, numRowsInBoard, player, xFinalSquare, yFinalSquare))
						break;

					initialSquare = finalSquare;
					xInitialSquare = xFinalSquare;
					yInitialSquare = yFinalSquare;

					cout << "You can jump again, Please enter the next square you wish to move your checker to" << endl;
				}
				else
					break;

			} while (true);

			if (!CheckWin(myCMCheckersBoard, numRowsInBoard))
			{
				DisplayBoard(myCMCheckersBoard, numRowsInBoard);
				player = otherPlayer(player);
				break;
			}
			else
			{
				cout << "Enter any character to terminate the game then press the enter key" << endl << "The program will terminate after the player presses the enter key" << endl;
				cin >> endChar;
				return 0;
			}
		}
	}
}

void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int squareNumber = 0;

	for (int i = 0; i < numRowsInBoard; i += 2)
	{
		CMCheckersBoard[i + 1][0] = WHITEMULE;
		CMCheckersBoard[i][numRowsInBoard - 1] = REDMULE;
	}

	for (int j = 1; j <= ((numRowsInBoard / 2) - 2); j += 2)
	{
		for (int i = 0; i < numRowsInBoard; i += 2)
		{
			CMCheckersBoard[i + 1][numRowsInBoard - j - 1] = REDSOLDIER;
			CMCheckersBoard[i][j] = WHITESOLDIER;
		}
	}

	for (int j = 2; j <= ((numRowsInBoard / 2) - 2); j += 2)
	{
		for (int i = 0; i < numRowsInBoard; i += 2)
		{
			CMCheckersBoard[i][numRowsInBoard - j - 1] = REDSOLDIER;
			CMCheckersBoard[i + 1][j] = WHITESOLDIER;
		}
	}
}

void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int squareNumber = 0;

	for (int j = 0; j < numRowsInBoard; j++)
	{
		for (int i = 0; i < numRowsInBoard; i++)
		{
			if (CMCheckersBoard[i][j] == WHITESOLDIER)
				cout << "  WS";
			else if (CMCheckersBoard[i][j] == WHITEMULE)
				cout << "  WM";
			else if (CMCheckersBoard[i][j] == WHITEKING)
				cout << "  WK";
			else if (CMCheckersBoard[i][j] == REDSOLDIER)
				cout << "  RS";
			else if (CMCheckersBoard[i][j] == REDMULE)
				cout << "  RM";
			else if (CMCheckersBoard[i][j] == REDKING)
				cout << "  RK";
			else
				cout << setw(4) << squareNumber;

			squareNumber++;
		}
		cout << endl;
	}
	cout << endl << endl;
}

int CountJumps(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[])
{
	int numJumps = 0;

	for (int yIndex = 0; yIndex < numRowsInBoard; yIndex++)
	{
		for (int xIndex = 0; xIndex < numRowsInBoard; xIndex++)
		{
			if (IsJump(CMCheckersBoard, numRowsInBoard, player, xIndex, yIndex) && IsPlayersPiece(CMCheckersBoard, player, xIndex, yIndex))
			{
				xLocArray[numJumps] = xIndex;
				yLocArray[numJumps] = yIndex;
				numJumps++;
			}
		}
	}

	return numJumps;
}

bool CheckList(int inArray1[], int inArray2[], int xIndex, int yIndex)
{
	for (int i = 0; i < sizeof(inArray1); i++)
		if (inArray1[i] == xIndex)
			for (int j = 0; j < sizeof(inArray2); j++)
				if (inArray2[j] == yIndex)
					return true;

	return false;
}

int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[], int yLocArray[])
{
	int numMove = 0;

	for (int yIndex = 0; yIndex < numRowsInBoard; yIndex++)
	{
		for (int xIndex = 0; xIndex < numRowsInBoard; xIndex++)
		{
			if (IsMove1Square(CMCheckersBoard, numRowsInBoard, player, xIndex, yIndex) && IsPlayersPiece(CMCheckersBoard, player, xIndex, yIndex))
			{
				xLocArray[numMove] = xIndex;
				yLocArray[numMove] = yIndex;
				numMove++;
			}
		}
	}

	return numMove;
}

bool IsMove1Square(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc)
{
	if (CMCheckersBoard[xLoc][yLoc] == WHITEKING || CMCheckersBoard[xLoc][yLoc] == REDKING)
	{
		if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, -1) == true)
			return true;
		else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, -1) == true)
			return true;
	}
	else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, 1) == true)
		return true;
	else if (CheckMove(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, 1) == true)
		return true;

	return false;
}

bool IsJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc)
{
	if (CMCheckersBoard[xLoc][yLoc] == WHITEKING || CMCheckersBoard[xLoc][yLoc] == REDKING)
	{
		if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, -1) == true)
			return true;
		else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, -1) == true)
			return true;
	}
	else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, 1, 1) == true)
		return true;
	else if (CheckJump(CMCheckersBoard, numRowsInBoard, player, xLoc, yLoc, -1, 1) == true)
		return true;

	return false;
}

bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int fromSquareNum, int toSquareNum, bool &jumped)
{
	char gameOver = '\0';
	int xInitialSquare = 0;
	int yInitialSquare = 0;
	int xFinalSquare = 0;
	int yFinalSquare = 0;
	int xdistance = 0;
	int ydistance = 0;
	jumped = false;

	getCoordinates(fromSquareNum, numRowsInBoard, xInitialSquare, yInitialSquare);
	getCoordinates(toSquareNum, numRowsInBoard, xFinalSquare, yFinalSquare);

	xdistance = xFinalSquare - xInitialSquare;
	if (xdistance >= numRowsInBoard - 2)
		xdistance -= numRowsInBoard;
	else if (xdistance <= 2 - numRowsInBoard)
		xdistance += numRowsInBoard;

	ydistance = yFinalSquare - yInitialSquare;

	if (abs(xdistance) > 2 && abs(ydistance) > 2)
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	else if (abs(xdistance) == 2 && abs(ydistance) == 2 && !IsPlayersPiece(CMCheckersBoard, otherPlayer(player), (xInitialSquare + numRowsInBoard + xdistance / 2) % numRowsInBoard, yInitialSquare + ydistance / 2))
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	else if ((player == WHITEPLAYER && CMCheckersBoard[xInitialSquare][yInitialSquare] != WHITEKING && ydistance <= 0) || (player == REDPLAYER && CMCheckersBoard[xInitialSquare][yInitialSquare] != REDKING && ydistance >= 0)) //piece moves in the wrong direction
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}
	else if (abs(xdistance) == 1 && abs(ydistance) == 1)
	{
		CMCheckersBoard[xFinalSquare][yFinalSquare] = CMCheckersBoard[xInitialSquare][yInitialSquare];
		CMCheckersBoard[xInitialSquare][yInitialSquare] = 0;
	}
	else if (abs(xdistance) == 2 && abs(ydistance) == 2)
	{
		CMCheckersBoard[xFinalSquare][yFinalSquare] = CMCheckersBoard[xInitialSquare][yInitialSquare];
		CMCheckersBoard[xInitialSquare][yInitialSquare] = 0;
		CMCheckersBoard[(xInitialSquare + numRowsInBoard + xdistance / 2) % numRowsInBoard][yInitialSquare + ydistance / 2] = 0;

	}
	else
	{
		cout << "Error;  illegal move" << endl;
		return false;
	}

	if (player == REDPLAYER && yFinalSquare == 0 || player == WHITEPLAYER && yFinalSquare == numRowsInBoard - 1)
	{
		if (player == REDPLAYER)
		{
			if (CMCheckersBoard[xFinalSquare][yFinalSquare] = REDMULE)
			{
				CMCheckersBoard[xFinalSquare][yFinalSquare] = REDKING;
				cout << "Red has created a Mule King,  White wins the game" << endl;
				cout << "Enter any character to terminate the game then press the enter key" << endl;
				cin >> gameOver;
				terminate();

			}
			else {
				CMCheckersBoard[xFinalSquare][yFinalSquare] = REDKING;
				return true;
			}
		} //end of redplayer
		else if (player == WHITEPLAYER)
		{
			if (CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEMULE)
			{
				CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEKING;
				cout << "White has created a Mule King,  Red wins the game" << endl;
				cout << "Enter any character to terminate the game then press the enter key" << endl;
				cin >> gameOver;
				terminate();
			}
			else {
				CMCheckersBoard[xFinalSquare][yFinalSquare] = WHITEKING;
				return true;
			}
		}
	}
}

bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard)
{
	int REDMULE_count = 0;
	int WHITEMULE_count = 0;
	int WHITESOLDIER_count = 0;
	int REDSOLDIER_count = 0;
	int WHITEKING_count = 0;
	int REDKING_count = 0;

	for (int j = 0; j < numRowsInBoard; j++)
	{
		for (int i = 0; i < numRowsInBoard; i++)
		{
			if (CMCheckersBoard[j][i] == REDMULE)
				REDMULE_count++;
			else if (CMCheckersBoard[j][i] == WHITEMULE)
				WHITEMULE_count++;
			else if (CMCheckersBoard[j][i] == WHITESOLDIER)
				WHITESOLDIER_count++;
			else if (CMCheckersBoard[j][i] == REDSOLDIER)
				REDSOLDIER_count++;
			else if (CMCheckersBoard[j][i] == REDKING)
				REDKING_count++;
			else if (CMCheckersBoard[j][i] == WHITEKING)
				WHITEKING_count++;
		}
	}
	if (REDMULE_count == 0)
	{
		cout << "The Red Player has won the game by losing all of the Red Mules" << endl;
		return true;
	}
	else if (WHITEMULE_count == 0)
	{
		cout << "The White Player has won the game by losing all of the White Mules" << endl;
		return true;
	}
	else if (REDKING_count == 0 && REDSOLDIER_count == 0)
	{
		cout << "The White Player has won by capturing all of the red players soldiers and kings" << endl;
		return true;
	}
	else if (WHITEKING_count == 0 && WHITESOLDIER_count == 0)
	{
		cout << "The Red Player has won by capturing all of the white players soldiers and kings" << endl;
		return true;
	}

	return false;
}

bool CheckMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection)
{
	if (player == WHITEPLAYER)
	{
		if (CMCheckersBoard[(xLoc + numRowsInBoard + xDirection) % numRowsInBoard][yLoc + yDirection] == NOPLAYER)
			return true;
	}
	else if (player == REDPLAYER)
	{
		if (CMCheckersBoard[(xLoc + numRowsInBoard + xDirection) % numRowsInBoard][yLoc - yDirection] == NOPLAYER)
			return true;
	}
	return false;
}

bool CheckJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLoc, int yLoc, int xDirection, int yDirection)
{
	if (player == WHITEPLAYER && IsPlayersPiece(CMCheckersBoard, REDPLAYER, (xLoc + numRowsInBoard + xDirection) % numRowsInBoard, yLoc + yDirection) && CMCheckersBoard[(xLoc + numRowsInBoard + 2 * xDirection) % numRowsInBoard][yLoc + 2 * yDirection] == NOPLAYER)
		return true;
	else if (player == REDPLAYER && IsPlayersPiece(CMCheckersBoard, WHITEPLAYER, (xLoc + numRowsInBoard + xDirection) % numRowsInBoard, yLoc - yDirection) && CMCheckersBoard[(xLoc + numRowsInBoard + 2 * xDirection) % numRowsInBoard][yLoc - 2 * yDirection] == NOPLAYER)
		return true;

	return false;
}

bool IsPlayersPiece(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int player, int xLoc, int yLoc)
{
	if (player == WHITEPLAYER && (CMCheckersBoard[xLoc][yLoc] == WHITESOLDIER || CMCheckersBoard[xLoc][yLoc] == WHITEMULE || CMCheckersBoard[xLoc][yLoc] == WHITEKING))
		return true;
	else if (player == REDPLAYER && (CMCheckersBoard[xLoc][yLoc] == REDSOLDIER || CMCheckersBoard[xLoc][yLoc] == REDMULE || CMCheckersBoard[xLoc][yLoc] == REDKING))
		return true;

	return false;
}

void getCoordinates(int squareNumber, int numRowsInBoard, int &xCoordinate, int &yCoordinate)
{
	xCoordinate = squareNumber % numRowsInBoard;
	yCoordinate = squareNumber / numRowsInBoard;
}

int getSquare(int xCoordinate, int yCoordinate, int numRowsInBoard)
{
	int square = 0;
	square = yCoordinate * numRowsInBoard + xCoordinate;
	return square;
}

int otherPlayer(int player)
{
	if (player == WHITEPLAYER)
		return REDPLAYER;
	else if (player == REDPLAYER)
		return WHITEPLAYER;

	return -1;
}
